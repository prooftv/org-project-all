import sanityClient from "lib/sanityClient";
import { localizePageQuery } from "lib/queries";
import { Page, PageContext } from "lib/interfaces";

/**
 * Formats the slug to the current locale
 * @remarks used by the `localizePath` function
 * @param slug - the slugs for each locale as an array
 * @param locale - the locale the slug should be formatted for
 * @param defaultLocale - the default locale of the site
 * @returns the capitalized string
 */
export function formatSlug(
  slug: string[],
  locale: string,
  defaultLocale: string
) {
  return locale === defaultLocale
    ? `/${slug.join("/")}`
    : `/${locale}/${slug.join("/")}`;
}

/**
 * Generates localized paths for pages
 * @remarks uses the page context to generate the localized path
 * @param pageContext - the pageContext object
 * @returns an array of localized path objects
 */
export function localizePath(pageContext: PageContext) {
  const { defaultLocale, locale, localization } = pageContext;
  return formatSlug(localization.slug, locale, defaultLocale);
}

/**
 * Generates localized paths for pages
 * @remarks uses the page context to generate the localized path
 * @param pageContext - the pageContext object
 * @returns an array of localized path objects
 */
export function getLocalizedPaths(pageContext: PageContext) {
  const paths = pageContext.locales.map((locale) => ({
    locale,
    href: localizePath({ ...pageContext, locale }),
  }));
  return paths;
}

/**
 * Gets the localized page context from the Sanity database
 * @remarks used to localized pages throughout the site
 * @param pageContext - the pageContext object generated by the GROQ query
 * @returns the page context object
 */
export async function getLocalizedPage(pageContext: PageContext) {
  const { data }: { data: { page: Page } } = await sanityClient.fetch(
    localizePageQuery,
    {
      id: pageContext.localization.id,
    }
  );
  return data.page;
}
